{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "---\n",
        "title: \"Scalable IT Architecture\"\n",
        "format: html\n",
        "---\n",
        "\n",
        "\n",
        "# 1. Data Storage and Ingestion\n",
        "\n",
        "-   Amazon S3:\n",
        "    -   Use S3 buckets to store raw high-frame-rate spatial-temporal data.\n",
        "    -   Separate folders for raw data, pre-processed data, and model artifacts.\n",
        "-   AWS Glue:\n",
        "    -   Automate the ETL process to clean and transform data for model training and inference.\n",
        "    -   Glue can handle the scale of data for multiple seasons and ensure structured data pipelines.\n",
        "\n",
        "## 2. Model Training\n",
        "\n",
        "-   Amazon SageMaker:\n",
        "    -   Train models using SageMaker's built-in resources.\n",
        "    -   Use a dedicated instance with 8 cores and large memory for the 8-hour training sessions.\n",
        "    -   Store training metrics and artifacts in S3.\n",
        "\n",
        "## 3. Model Prediction\n",
        "\n",
        "-   AWS Batch:\n",
        "    -   Schedule batch jobs for overnight predictions (50 games/day).\n",
        "    -   Each game prediction requires a single CPU and 4 GB of memory for 60 minutes.\n",
        "    -   Use Compute Environment configurations to scale EC2 resources for optimal cost-efficiency.\n",
        "\n",
        "## 4. Data Warehouse:\n",
        "\n",
        "-   Snowflake:\n",
        "    -   Store structured data (aggregated predictions, historical data) for analytical queries.\n",
        "    -   ntegration with S3 for seamless data loading and querying.\n",
        "\n",
        "## 5. MLOps and Model Monitoring\n",
        "\n",
        "-   Amazon CloudWatch:\n",
        "    -   Monitor training and prediction jobs.\n",
        "    -   Set up alarms for model performance degradation.\n",
        "-   SageMaker Model Monitor:\n",
        "    -   Track model performance metrics (e.g., prediction accuracy, latency) and data drift.\n",
        "\n",
        "## 6. Visualization and Reporting\n",
        "\n",
        "-   R Shiny or Streamlit:\n",
        "    -   Deploy a visualization app to present model outputs, trends, and performance metrics.\n",
        "    -   Host the app using a dockerized solution (shinyproxy works nicely)\n",
        "\n",
        "## 7. Orchestration\n",
        "\n",
        "-   Apache Airflow (Managed on AWS MWAA - Managed Workflows for Apache Airflow):\n",
        "    -   Schedule and monitor workflows for ETL, model training, and predictions.\n",
        "    -   Integrate with S3, Snowflake and SageMaker for seamless pipeline execution.\n",
        "\n",
        "## 8. Scalability and Security\n",
        "\n",
        "-   Auto-Scaling Groups:\n",
        "    -   Dynamically scale EC2 instances based on workload for cost management.\n",
        "-   IAM Roles:\n",
        "    -   Manage access and permissions across AWS services to ensure data security.\n",
        "-   VPC:\n",
        "    -   Deploy services in a private network for enhanced security.\n",
        "\n",
        "# Service Interaction Diagram Components:\n",
        "\n",
        "\\- Input: Raw Data (S3) → Preprocessing (Glue)\n",
        "\n",
        "\\- Training: Preprocessed Data (Glue/S3) → SageMaker\n",
        "\n",
        "\\- Inference: Raw Data (S3) → Batch Jobs (AWS Batch)\n",
        "\n",
        "\\- Storage: Predictions (S3 → Snowflake)\n",
        "\n",
        "\\- Visualization: Dashboards (Streamlit/R Shiny)\n",
        "\n",
        "\\- Monitoring: CloudWatch, SageMaker Model Monitor\n",
        "\n",
        "\\- Orchestration: Airflow (MWAA)\n",
        "\n",
        "\n",
        "```{css}\n",
        "[Data Sources] → [S3] → [Glue] → [SageMaker (Training)] → [S3/Snowflake]\n",
        "                            ↓                        ↘\n",
        "                         [AWS Batch (Inference)]     ↘\n",
        "                              ↓                       ↘\n",
        "                        [S3/Snowflake] → [Visualization (Streamlit)]\n",
        "```"
      ],
      "id": "6792a6bc"
    }
  ],
  "metadata": {
    "kernelspec": {
      "name": "python3",
      "language": "python",
      "display_name": "Python 3 (ipykernel)",
      "path": "C:\\Users\\seneg\\AppData\\Local\\Programs\\Python\\Python313\\share\\jupyter\\kernels\\python3"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 5
}